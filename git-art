#!/usr/bin/perl

if ($#ARGV < 1) {
	print STDERR "Usage: $ARGV0 <revision range>\n";
	exit(1);
}

open INPUT, 'git rev-list --parents ' . join(' ', @ARGV) . '|';

my %commits;
my @list;

sub add_parents ($$) {
	my $parents = $_[0];
	my $y = $_[1];
	foreach my $parent (split / /,$parents) {
		if (!defined($commits->{$parent})) {
			$commits->{$parent} = {
				y => $y++,
				sha1 => $parent
			};
		} else {
			if ($commits->{$parent}->{y} < $y) {
				$commits->{$parent}->{y} = $y++;
			} else {
				$y = $commits->{$parent}->{y} + 1;
			}
		}
	}
}

# expects output of `rev-list --parents --topo-order`
$i = 0;
while (<INPUT>) {
	if (/^([0-9a-f]{40}) ?(.*)$/) {
		$sha1 = $1;
		$parents = $2;
		if (!defined($commits->{$sha1})) {
			$commits->{$sha1} = {
				y => 0,
				sha1 => $sha1,
			};
		} else {
			$commits->{$sha1}->{index} = $#list;
		}
		$commits->{$sha1}->{parents} = $parents;
		$list[$i] = $commits->{$sha1};
		$commits->{$sha1}->{index} = $i++;
		add_parents($parents, $commits->{$sha1}->{y});
	}
}
close INPUT;

if (@list > 26) {
	print STDERR "Cannot draw more than 26 revs.";
	exit(1);
}

# make labels
$height = 0;
foreach my $i (0 .. $#list) {
	$list[$i]->{x} = $#list - $i;
	$list[$i]->{label} = chr(0x41 + $list[$i]->{x});
	if ($height < $list[$i]->{y}) {
		$height = $list[$i]->{y};
	}
}

# make a canvas
$width = $#list * 2 + 1;
$height = $height * 2 + 1;
@canvas = (' ' x $width . "\n") x $height;

sub set_cell ($$$) {
	my $x = $_[0];
	my $y = $_[1];
	my $c = $_[2];
	substr($canvas[$y], $x, 1) = $c;
}

sub get_cell ($$) {
	my $x = $_[0];
	my $y = $_[1];
	return substr($canvas[$y], $x, 1);
}

sub msg($) {
	my $info = $_[0];
	return $info->{label} . ": " . $info->{x} . ", " . $info->{y};
}

sub draw_line ($$) {
	my $commit1 = $_[0];
	my $commit2 = $_[1];
	my $x1 = $commit1->{x};
	my $y1 = $commit1->{y};
	my $x2 = $commit2->{x};
	my $y2 = $commit2->{y};
	if ($y1 == $y2) {
		for (my $i = $x1 * 2 - 1; $i > $x2 * 2; $i--) {
			set_cell($i, $y1 * 2, "-");
		}
	} else {
		my $is_straight = 0;
		my $factor = ($y2 - $y1) / ($x1 - $x2);
		my $i;
		if ($x1 - $x2 == $y2 - $y1) {
			$is_straight = 1;
			for ($i = $x1 * 2 - 1; $i > $x2 * 2; $i -= 2) {
				my $y = $y1 * 2 + ($x1 * 2 - $i) * $factor;
				my $c = get_cell($i, int($y));
				if ($c ne ' ' && $c ne '-') {
					$is_straight = 0;
					last;
				}
			}
		}
		if ($is_straight) {
			for ($i = $x1 * 2 - 1; $i > $x2 * 2; $i--) {
				my $y = $y1 * 2 + ($x1 * 2 - $i) * $factor;
				my $c = (get_cell($i, int($y)) ne ' ') ?
					'+' : '/';
				set_cell($i, int($y), $c);
			}
		} else {
			set_cell($x1 * 2 - 1, $y1 * 2 + 1, '\'');
			for ($i = $x1 * 2 - 2; $i > $x2 * 2 + 1; $i--) {
				set_cell($i, $y1 * 2 + 1, '-');
			}
			set_cell($x2 * 2 + 1, $y1 * 2 + 1, ',');
			for ($i = $y1 * 2 + 2; $i < $y2 * 2; $i++) {
				my $c = (get_cell($x2 * 2, $i) ne ' ') ?
					'+' : '|';
				set_cell($x2 * 2, $i, $c);
			}
		}
	}
}

# draw it
foreach my $info (@list) {
	$x = $info->{x} * 2;
	$y = $info->{y} * 2;
	set_cell ($x, $y, $info->{label});
	foreach my $parent (split / /,$info->{parents}) {
		if (defined($commits->{$parent}->{index})) {
			draw_line($info, $commits->{$parent});
		}
	}
}

print @canvas;
